#+STARTUP: overview

* interface tweaks
  #+begin_src emacs-lisp
    (setq inhibit-startup-message t)
    (tool-bar-mode -1)
    (fset 'yes-or-no-p 'y-or-n-p)
    (global-set-key (kbd "<f5>") 'revert-buffer)
    ;; (set-frame-font "-WQYF-WenQuanYi Micro Hei Mono-normal-normal-normal-*-16-*-*-*-*-0-iso10646-1") 
  #+end_src
* cnfonts
  #+BEGIN_SRC emacs-lisp
    ;; (use-package cnfonts
    ;;    :ensure t)
  #+END_SRC
* try
  #+begin_src emacs-lisp
    (use-package try
      :ensure t)
  #+end_src

* which key
  Brings up some help
  #+begin_src emacs-lisp
    (use-package which-key
      :ensure t
      :config (which-key-mode))
  #+end_src

* Org mode
  #+begin_src emacs-lisp
    ;; Org-mode stuff
    ;; (require 'org-tempo)
    (use-package org-bullets
      :ensure
      :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+end_src

* Ace windows for easy window switching
  #+begin_src emacs-lisp
    (defalias 'list-buffers 'ibuffer)
    ;; (defalias 'list-buffers 'ibuffer-other-window)

    (use-package ace-window
      :ensure t
      :init
      (progn
        (global-set-key [remap other-window] 'ace-window)
        (custom-set-faces
         '(aw-leading-char-face
           ((t (:inherit ace-jump-face-foreground :height 3.0)))))
        ))
  #+end_src
* Swiper / Ivy / Counsel
  #+begin_src emacs-lisp
    (use-package counsel
      :ensure t
      )

    (use-package ivy
      :ensure t
      :diminish (ivy-mode)
      :bind (("C-x b" . ivy-switch-buffer))
      :config
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy))

    (use-package swiper
      :ensure try
      :bind (("C-s" . swiper)
             ("C-r" . swiper)
             ("C-c C-r" . ivy-resume)
             ("M-x" . counsel-M-x)
             ("C-x C-f" . counsel-find-file))
      :config
      (progn
        (ivy-mode 1)
        (setq ivy-use-virtual-buffers t)
        (setq ivy-display-style 'fancy)
        (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
        ))
  #+end_src
* Avy - navigate by searching for a letter on the screen and jumping to it
  #+begin_src emacs-lisp
    (use-package avy
      :ensure t
      :bind ("M-s" . avy-goto-char))
  #+end_src
* Autocomplete
  #+begin_src emacs-lisp
    (use-package auto-complete
      :ensure t
      :init
      (progn
        (ac-config-default)
        (global-auto-complete-mode t)))
  #+end_src
* Themes
  #+begin_src emacs-lisp

    (use-package color-theme-modern
      :ensure t)

    (use-package zenburn-theme
      :ensure t
      :config (load-theme 'zenburn t))

    (load-theme 'leuven t)

  #+end_src
* Reveal.js
  #+begin_src emacs-lisp
    (use-package ox-reveal
      :ensure t
      :config
      (require 'ox-reveal)
      (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.8.0/")
      (setq org-reveal-mathjax t))

    (use-package htmlize
      :ensure t)
  #+end_src
* FlyCheck
  #+begin_src emacs-lisp
    (use-package flycheck
      :ensure t
      :init (global-flycheck-mode))
  #+end_src
* Python
  #+begin_src emacs-lisp
    (use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'Python-mode-hook 'jedi:ac-setup))

    (use-package elpy
      :ensure t
      :init
      (elpy-enable))


  #+end_src
* Yasnippet
  #+begin_src emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))
  #+end_src
